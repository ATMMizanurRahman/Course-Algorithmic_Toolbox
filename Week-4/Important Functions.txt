int binary_search(const vector<int> &a, int x) {
  int low = 0, high = (int)a.size() - 1; 
  while(low <= high) {
	  int mid = low + (high - low)/2;
	  if (x == a[mid])
		  return mid;
	  else if (x < a[mid])
		  high = mid - 1;
	  else
		  low = mid + 1;
  }
  return -1;
}

int linear_search(const vector<int> &a, int x) {
  for (size_t i = 0; i < a.size(); ++i) {
    if (a[i] == x) return i;
  }
  return -1;
}




### Quick_Sort ####

vector<int> partition3(vector<int> &a, int l, int r) {
	int x = a[l];
    int m1 = l;
	int m2 = r;
	int i = l;
    while(i <= m2){
		if (a[i] < x) {
			swap(a[i], a[m1]);
			m1++;
			i++;
		}
		else if (a[i] > x) {
			swap(a[i], a[m2]);
			m2--;
		}
		else
			i++;
    }
	vector<int> m = {m1, m2};
    return m;
}

int partition2(vector<int> &a, int l, int r) {
  int x = a[l];
  int j = l;
  for (int i = l + 1; i <= r; i++) {
    if (a[i] <= x) {
      j++;
      swap(a[i], a[j]);
    }
  }
  swap(a[l], a[j]);
  return j;
}

void randomized_quick_sort(vector<int> &a, int l, int r) {
  if (l >= r) {
    return;
  }

  int k = l + rand() % (r - l + 1);
  swap(a[l], a[k]);
  // int m = partition2(a, l, r);

  // randomized_quick_sort(a, l, m - 1);
  // randomized_quick_sort(a, m + 1, r);
  vector<int> m = partition3(a, l, r);

  randomized_quick_sort(a, l, m[0] - 1);
  randomized_quick_sort(a, m[1] + 1, r);
}



